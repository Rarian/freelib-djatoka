<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>info.freelibrary</groupId>
	<artifactId>freelib-djatoka</artifactId>
	<version>1.1.2-SNAPSHOT</version>
	<name>FreeLibrary Djatoka</name>
	<packaging>war</packaging>
	<description>A fork of aDORe-Djatoka designed to work with Maven/Jetty and to address some other issues (caching, JDK support, etc.)</description>
	<inceptionYear>20110701</inceptionYear>
	<!--
		Project properties:
		
		These are the things you'll probably want to adjust.  It's best practice not
		to change this file but to use a Maven settings.xml file (which can be at
		${MAVEN_HOME}/conf/settings.xml or ${USER_HOME}/.m2/settings.xml).
		
		Change the property value in there and you'll override the values that are
		configured below...  A sample skeleton settings.xml file is provided in
		src/main/resources if you want to copy it into a place where it will be read.
	-->
	<properties>
		<!-- The port Jetty should run at -->
		<jetty.port>8888</jetty.port>

		<!-- The types of files you want to ingest -->
		<djatoka.ingest.exts>tiff,tif</djatoka.ingest.exts>
		<!-- The source image file system from which to ingest/convert images -->
		<djatoka.ingest.data>${project.basedir}/src/test/resources/images</djatoka.ingest.data>
		<!-- Where the JP2s should be stored -->
		<djatoka.jp2.data>${project.basedir}/target/images</djatoka.jp2.data>
		<!-- The cache the OpenURL system uses when it creates an object -->
		<openurl.cache.dir>${project.basedir}/target/tmpcache</openurl.cache.dir>
		<!-- Separate cache used for the permanent pairtree storage system -->
		<djatoka.view.cache>${project.basedir}/target/cache</djatoka.view.cache>
		<!-- Max TIFF file size allowed for ingest (specified in MB) -->
		<djatoka.ingest.maxSize>900</djatoka.ingest.maxSize>
		<!-- Supported: "", "sLUM", "sRGB", "sYCC", "iccLUM" or "iccRGB" -->
		<djatoka.ingest.color.space>sRGB</djatoka.ingest.color.space>

		<!-- List of image sources (used when a URL is passed in) -->
		<djatoka.ingest.sources>^http://localhost/islandora/object/([a-zA-Z]*(%3A|:)[0-9a-zA-Z]*)/datastream/JP2/view.*$
			^http://memory.loc.gov/gmd/gmd433/g4330/g4330/([a-z0-9A-Z]*).jp2$</djatoka.ingest.sources>
		<!-- List of image source guesses (used when ID can't be otherwise resolved) -->
		<djatoka.ingest.guesses>http://localhost/islandora/object/{}/datastream/JP2/view
			http://memory.loc.gov/gmd/gmd433/g4330/g4330/{}.jp2</djatoka.ingest.guesses>

		<!-- You shouldn't need to set anything below here; these are generic -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<waitForChild>false</waitForChild>
	</properties>
	<dependencies>
		<!-- Below only for internal image reports -->
		<dependency>
			<groupId>org.im4java</groupId>
			<artifactId>im4java</artifactId>
			<version>1.2.0</version>
		</dependency>
		<!-- Above only for internal image reports -->
		<dependency>
			<groupId>info.freelibrary</groupId>
			<artifactId>freelib-utils</artifactId>
			<version>0.4.0</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.0.13</version>
		</dependency>
		<dependency>
			<groupId>xml-apis</groupId>
			<artifactId>xml-apis</artifactId>
			<version>1.3.03</version>
		</dependency>
		<dependency>
			<groupId>commons-cli</groupId>
			<artifactId>commons-cli</artifactId>
			<version>1.1</version>
		</dependency>
		<dependency>
			<groupId>com.martiansoftware</groupId>
			<artifactId>jsap</artifactId>
			<version>2.1</version>
		</dependency>
		<dependency>
			<groupId>commons-dbcp</groupId>
			<artifactId>commons-dbcp</artifactId>
			<version>1.2.2</version>
		</dependency>
		<dependency>
			<groupId>commons-pool</groupId>
			<artifactId>commons-pool</artifactId>
			<version>1.4</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-servlet</artifactId>
			<version>9.0.5.v20130815</version>
		</dependency>
		<dependency>
			<groupId>kdu</groupId>
			<artifactId>kdu_jni</artifactId>
			<version>0.0.0</version>
			<scope>system</scope>
			<systemPath>${project.basedir}/lib/kdu_jni.jar</systemPath>
		</dependency>
		<dependency>
			<groupId>imagej</groupId>
			<artifactId>ij-ImageIO</artifactId>
			<version>0.0.0</version>
			<scope>system</scope>
			<systemPath>${project.basedir}/lib/ij-ImageIO.jar</systemPath>
		</dependency>
		<dependency>
			<groupId>imagej</groupId>
			<artifactId>ij</artifactId>
			<version>0.0.0</version>
			<scope>system</scope>
			<systemPath>${project.basedir}/lib/ij.jar</systemPath>
		</dependency>
		<dependency>
			<groupId>xom</groupId>
			<artifactId>xom</artifactId>
			<version>1.2.5</version>
		</dependency>
		<dependency>
			<groupId>net.sf.opencsv</groupId>
			<artifactId>opencsv</artifactId>
			<version>2.3</version>
		</dependency>
	</dependencies>
	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<!-- We now require 1.7 or greater JDK -->
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
			</plugin>
			<!-- The jetty plugin is how we run djatoka from within Maven -->
			<plugin>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>9.0.5.v20130815</version>
				<dependencies>
					<dependency>
						<groupId>org.eclipse.jetty</groupId>
						<artifactId>jetty-servlets</artifactId>
						<version>9.0.5.v20130815</version>
					</dependency>
					<dependency>
						<groupId>kdu</groupId>
						<artifactId>kdu_jni</artifactId>
						<version>0.0.0</version>
						<scope>system</scope>
						<systemPath>${project.basedir}/lib/kdu_jni.jar</systemPath>
					</dependency>
					<dependency>
						<groupId>imagej</groupId>
						<artifactId>ij-ImageIO</artifactId>
						<version>0.0.0</version>
						<scope>system</scope>
						<systemPath>${project.basedir}/lib/ij-ImageIO.jar</systemPath>
					</dependency>
					<dependency>
						<groupId>imagej</groupId>
						<artifactId>ij</artifactId>
						<version>0.0.0</version>
						<scope>system</scope>
						<systemPath>${project.basedir}/lib/ij.jar</systemPath>
					</dependency>
				</dependencies>
				<configuration>
					<!-- Putting JVM args in CDATA to prevent wrapping -->
					<jvmArgs><![CDATA[-Djetty.port=${jetty.port} -Dkakadu.home=${LD_LIBRARY_PATH} -Djava.library.path=${LD_LIBRARY_PATH} -DDJATOKA_HOME=${basedir} -DLD_LIBRARY_PATH=${LD_LIBRARY_PATH} -DDYLD_LIBRARY_PATH=${basedir}/${DYLD_LIBRARY_PATH}]]></jvmArgs>
					<stopKey>${jetty.stop.key}</stopKey>
					<stopPort>8993</stopPort>
					<scanIntervalSeconds>0</scanIntervalSeconds>
					<!-- Tells Maven process not to wait on the forked Jetty server -->
					<waitForChild>${waitForChild}</waitForChild>
					<!-- Access log -->
					<requestLog
						implementation="org.eclipse.jetty.server.NCSARequestLog">
						<filename>target/yyyy_mm_dd.request.log</filename>
						<retainDays>30</retainDays>
						<append>true</append>
						<extended>false</extended>
						<logTimeZone>GMT</logTimeZone>
					</requestLog>
				</configuration>
			</plugin>
			<!-- Plugin that enables running the command line tilecache utility -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.2.1</version>
				<executions>
					<execution>
						<goals>
							<goal>java</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<systemProperties>
						<systemProperty>
							<key>logback.configurationFile</key>
							<value>src/main/resources/logback.xml</value>
						</systemProperty>
					</systemProperties>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.16</version>
				<configuration>
					<!-- Our integration tests shouldn't be run as unit tests -->
					<excludes>
						<exclude>**/*IntegrationTest.java</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>
	<profiles>
		<profile>
			<id>linux-32</id>
			<activation>
				<os>
					<name>Linux</name>
					<arch>i386</arch>
				</os>
			</activation>
			<properties>
				<LD_LIBRARY_PATH>${project.basedir}/lib/Linux-x86-32</LD_LIBRARY_PATH>
			</properties>
		</profile>
		<profile>
			<id>linux-64</id>
			<activation>
				<os>
					<name>Linux</name>
					<arch>amd64</arch>
				</os>
			</activation>
			<properties>
				<LD_LIBRARY_PATH>${project.basedir}/lib/Linux-x86-64</LD_LIBRARY_PATH>
			</properties>
		</profile>
		<profile>
			<id>mac-x86</id>
			<activation>
				<os>
					<name>Mac OS X</name>
				</os>
			</activation>
			<properties>
				<!-- Include both b/c java.library.path is set to LD_LIBRARY_PATH -->
				<DYLD_LIBRARY_PATH>lib/Mac-x86</DYLD_LIBRARY_PATH>
				<LD_LIBRARY_PATH>lib/Mac-x86</LD_LIBRARY_PATH>
			</properties>
		</profile>
		<profile>
			<id>windows</id>
			<activation>
				<os>
					<family>windows</family>
					<arch>x86</arch>
				</os>
			</activation>
			<properties>
				<LD_LIBRARY_PATH>${project.basedir}/lib/Win32</LD_LIBRARY_PATH>
			</properties>
		</profile>
		<profile>
			<id>solaris-x86</id>
			<activation>
				<os>
					<name>SunOS</name>
					<arch>x86</arch>
				</os>
			</activation>
			<properties>
				<LD_LIBRARY_PATH>${project.basedir}/lib/Solaris-x86</LD_LIBRARY_PATH>
			</properties>
		</profile>
		<profile>
			<id>solaris-sparc</id>
			<activation>
				<os>
					<name>SunOS</name>
					<arch>sparc</arch>
				</os>
			</activation>
			<properties>
				<LD_LIBRARY_PATH>${project.basedir}/lib/Solaris-Sparc</LD_LIBRARY_PATH>
			</properties>
		</profile>
		<profile>
			<id>solaris-sparcv9</id>
			<activation>
				<os>
					<name>Solaris</name>
					<arch>sparc</arch>
				</os>
			</activation>
			<properties>
				<LD_LIBRARY_PATH>${project.basedir}/lib/Solaris-Sparcv9</LD_LIBRARY_PATH>
			</properties>
		</profile>
		<!-- Build profile just used on Travis-CI VM to run the integration tests -->
		<profile>
			<id>travis</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>2.16</version>
						<configuration>
							<systemPropertyVariables>
								<jetty.port>${jetty.port}</jetty.port>
							</systemPropertyVariables>
							<includes>
								<include>**/*IntegrationTest.java</include>
							</includes>
						</configuration>
						<executions>
							<execution>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
