package info.freelibrary.djatoka.util;

import static org.junit.Assert.*;

import org.junit.Test;

public class CacheUtilsTest {

    @Test
    public void testGetFileName() {
	String scale = Integer.toString(CacheUtils.getScale(10));
	assertEquals("image_1024_0-0-1023-1023.jpg",
		CacheUtils.getFileName(null, scale, "0,0,1023,1023"));

	// TODO: should this class throw an exception if level AND scale/region
	// are passed to it?
    }

    @Test
    public void testGetMaxLevel() {
	assertEquals(12, CacheUtils.getMaxLevel(2338, 1684));
    }

    @Test
    public void testGetScale() {
	assertEquals(256, (int) CacheUtils.getScale(8));
    }

    @Test
    public void testGetCachingQueries() {
	String[] queries = new String[] { "/all/1", "/all/2", "/all/4",
		"/all/8", "/all/16", "/all/32", "/all/64", "/all/128",
		"/all/256", "/0,0,2047,2047/512", "/2048,0,2048,2047/512",
		"/0,0,1023,1023/1024", "/1024,0,1024,1023/1024",
		"/2048,0,1024,1023/1024", "/3072,1024,1024,1024/1024",
		"/4096,1024,1024,1024/1024", "/5120,1024,1024,1024/1024",
		"/0,0,511,511/2048", "/512,0,512,511/2048",
		"/1024,0,512,511/2048", "/1536,0,512,511/2048",
		"/2048,0,512,511/2048", "/2560,512,512,512/2048",
		"/3072,512,512,512/2048", "/3584,512,512,512/2048",
		"/4096,512,512,512/2048", "/4608,512,512,512/2048",
		"/5120,1024,512,512/2048", "/5632,1024,512,512/2048",
		"/6144,1024,512,512/2048", "/6656,1024,512,512/2048",
		"/7168,1024,512,512/2048", "/7680,1536,512,512/2048",
		"/8192,1536,512,512/2048", "/8704,1536,512,512/2048",
		"/9216,1536,512,512/2048", "/9728,1536,512,512/2048",
		"/0,0,255,255/4096", "/256,0,256,255/4096",
		"/512,0,256,255/4096", "/768,0,256,255/4096",
		"/1024,0,256,255/4096", "/1280,0,256,255/4096",
		"/1536,0,256,255/4096", "/1792,0,256,255/4096",
		"/2048,0,256,255/4096", "/2304,0,256,255/4096",
		"/2560,256,256,256/4096", "/2816,256,256,256/4096",
		"/3072,256,256,256/4096", "/3328,256,256,256/4096",
		"/3584,256,256,256/4096", "/3840,256,256,256/4096",
		"/4096,256,256,256/4096", "/4352,256,256,256/4096",
		"/4608,256,256,256/4096", "/4864,256,256,256/4096",
		"/5120,512,256,256/4096", "/5376,512,256,256/4096",
		"/5632,512,256,256/4096", "/5888,512,256,256/4096",
		"/6144,512,256,256/4096", "/6400,512,256,256/4096",
		"/6656,512,256,256/4096", "/6912,512,256,256/4096",
		"/7168,512,256,256/4096", "/7424,512,256,256/4096",
		"/7680,768,256,256/4096", "/7936,768,256,256/4096",
		"/8192,768,256,256/4096", "/8448,768,256,256/4096",
		"/8704,768,256,256/4096", "/8960,768,256,256/4096",
		"/9216,768,256,256/4096", "/9472,768,256,256/4096",
		"/9728,768,256,256/4096", "/9984,768,256,256/4096",
		"/10240,1024,256,256/4096", "/10496,1024,256,256/4096",
		"/10752,1024,256,256/4096", "/11008,1024,256,256/4096",
		"/11264,1024,256,256/4096", "/11520,1024,256,256/4096",
		"/11776,1024,256,256/4096", "/12032,1024,256,256/4096",
		"/12288,1024,256,256/4096", "/12544,1024,256,256/4096",
		"/12800,1280,256,256/4096", "/13056,1280,256,256/4096",
		"/13312,1280,256,256/4096", "/13568,1280,256,256/4096",
		"/13824,1280,256,256/4096", "/14080,1280,256,256/4096",
		"/14336,1280,256,256/4096", "/14592,1280,256,256/4096",
		"/14848,1280,256,256/4096", "/15104,1280,256,256/4096",
		"/15360,1536,256,256/4096", "/15616,1536,256,256/4096",
		"/15872,1536,256,256/4096", "/16128,1536,256,256/4096",
		"/16384,1536,256,256/4096", "/16640,1536,256,256/4096",
		"/16896,1536,256,256/4096", "/17152,1536,256,256/4096",
		"/17408,1536,256,256/4096", "/17664,1536,256,256/4096" };
	assertArrayEquals(queries, CacheUtils.getCachingQueries(2338, 1684)
		.toArray());
    }

    @Test
    public void testGetRegion() {
	assertEquals("0,0,1023,1023",
		CacheUtils.getRegion(10, 1684, 2338, 0, 0));
    }

}
