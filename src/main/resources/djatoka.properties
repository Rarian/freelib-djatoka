# djatoka.properties property values can be set in a variety of places:
#
# 1) There is a default value configured in the pom.xml's "properties" element
# 2) This can be overridden by setting the value in one of the POM's profiles
# 3) This can be overridden by setting it in /usr/share/maven2/conf/settings.xml
#
# This gives different approaches: 1) setting by os/arch (in the profile) or 2)
# setting by machine (production, development, or testing) in the settings.xml;
# of course, you can also just use the defaults set in the pom.xml's properties

## djatoka Ingest Properties

# What sort of files do we want to ingest? for instance: tiff,tif (no spaces)
djatoka.ingest.data.exts=${djatoka.ingest.exts}

# Where is this directory of files we want to ingest? e.g., /usr/local/images
djatoka.ingest.data.dir=${djatoka.ingest.data}

# The maxSize for file ingest (so you don't get an out of memory error)
djatoka.ingest.file.maxSize=${djatoka.ingest.maxSize}

# Where do we want to put the JP2s we create? e.g., /usr/local/djatoka/jp2s
djatoka.ingest.jp2.dir=${djatoka.jp2.data}

# Do we want to use a color space?  See pom.xml for supported profiles
djatoka.ingest.jp2.color.space=${djatoka.ingest.color.space}

## djatoka View Properties

djatoka.view.cache.dir=${djatoka.view.cache}

# less flexible than adore-djatoka, but that's okay
djatoka.view.format=image/jpeg
djatoka.view.format.ext=jpg

## OpenURL Service Properties

OpenURLJP2KService.referentResolverImpl=${referent.resolver}
OpenURLJP2KService.cacheEnabled=${cache.enabled}
OpenURLJP2KService.cacheTmpDir=${openurl.cache.dir}
OpenURLJP2KService.cacheSize=1000
# We ignore cacheImageMaxPixels (it's commented out in the code)
OpenURLJP2KService.cacheImageMaxPixels=100000

## Format Factory Properties

jpeg_writer=gov.lanl.adore.djatoka.io.writer.JPGWriter
jpg_writer=gov.lanl.adore.djatoka.io.writer.JPGWriter
jp2_writer=gov.lanl.adore.djatoka.io.writer.JP2Writer
png_writer=gov.lanl.adore.djatoka.io.writer.PNGWriter
tiff_writer=gov.lanl.adore.djatoka.io.writer.TIFWriter
tif_writer=gov.lanl.adore.djatoka.io.writer.TIFWriter
gif_writer=gov.lanl.adore.djatoka.io.writer.GIFWriter

## Database IReferentResolver Resolver

IdentifierResolver.checkDatabase = false;
#IdentifierResolver.url=jdbc:mysql://localhost/djatoka
#IdentifierResolver.driver=com.mysql.jdbc.Driver
#IdentifierResolver.login=djatoka
#IdentifierResolver.pwd=djatoka
#IdentifierResolver.maxActive=50
#IdentifierResolver.maxIdle=10
#IdentifierResolver.query=SELECT identifier, imageFile FROM resources WHERE identifier='\\i';


## Defines Transformation Plug-in to apply post extraction

#OpenURLJP2KService.transformPlugin=gov.lanl.adore.djatoka.plugin.ImageWatermark

## Transformation Plug-in Properties

#ImageWatermark.imagePath=/usr/local/adore-djatoka-1.0/etc/logo.gif
#ImageWatermark.imageOpacity=0.4f
#Watermark.statement=Enter Copyright Statement Here
#Watermark.allowedDomain=lanl.gov
#Watermark.fontName=Arial
#Watermark.fontSize=12
#Watermark.fontColor=255,255,255,255
#Watermark.fontOpacity=0.7f